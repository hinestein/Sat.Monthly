x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- lm(y ~ x + m)
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
#Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
#}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
head(Xl)
mod
mean(XL$s)
mean(Xl$s)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete.1[[i]]
MS <- Monthly.Satellite.Data.Complete.1[[i]]
y <- MG$Rainfall
x <- MS$Precipitation
m <- MG$Month
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- lm(y ~ x + m)
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
#Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x, na.rm = TRUE)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
summary(Xl)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete.1[[i]]
MS <- Monthly.Satellite.Data.Complete.1[[i]]
y <- MG$Rainfall
x <- MS$Precipitation
m <- MG$Month
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- lm(y ~ I(x^(1/2)) + m)
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
#Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x, na.rm = TRUE)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
summary(Xl)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete.1[[i]]
MS <- Monthly.Satellite.Data.Complete.1[[i]]
y <- MG$Rainfall
x <- MS$Precipitation
m <- MG$Month
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- lm(y ~ I(x^(1/3)) + m)
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
#Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x, na.rm = TRUE)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
summary(Xl)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete.1[[i]]
MS <- Monthly.Satellite.Data.Complete.1[[i]]
y <- MG$Rainfall
x <- MS$Precipitation
m <- MG$Month
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- lm(y ~ I(x^(1/2)) + m)
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
#Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x, na.rm = TRUE)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
summary(Xl)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete.1[[i]]
MS <- Monthly.Satellite.Data.Complete.1[[i]]
y <- MG$Rainfall
x <- MS$Precipitation
m <- MG$Month
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- lm(y ~ I(x^(1/2)) + m)
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
#Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x, na.rm = TRUE)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
summary(Xl)
summary(mod)
library("quantreg")
library("MASS")
library("plot3D")
library("rworldmap")
library("spdep")
library("rworldxtra")
p1 <- function(n){
oldw <- getOption("warn")
options(warn = -1)
y <- Monthly.Rain.Gauge.Data.Complete[[n]]$Rainfall
x <- Monthly.Satellite.Data.Complete[[n]][,c(1,3)]
cc <- complete.cases(x[,2])
x1 <- x[cc,]
y1 <- y[cc]
m <- x1[,1]!=0
x2 <- x1[m,2]
y2 <- y1[m]
if(class(x2)=="factor"){
x2 <- levels(x2)[x2]
x2 <- as.numeric(x2)
}
if(class(y2)=="factor"){
y2 <- levels(y2)[y2]
y2 <- as.numeric(y2)
}
z <- cbind(y2,x2)
z <- z[complete.cases(z),]
options(warn = oldw)
k <- Monthly.Satellite.Data[[n]][1,6]
if(nchar(k) == 5){
k <- paste(0,k, sep = "")
}
if(nchar(k) == 4){
k <- paste(0,0,k, sep = "")
}
if(class(Monthly.Rain.Gauge.Data.Complete[[n]]$Station[1])=="factor"){
l <- levels(Monthly.Rain.Gauge.Data.Complete[[n]]$Station[1])
}else{
l <- Monthly.Rain.Gauge.Data.Complete[[n]]$Station[1]
}
if(nchar(l) == 5){
l <- paste(0,l, sep = "")
}
if(nchar(l) == 4){
l <- paste(0,0,l, sep = "")
}
if(l==k){
m1 <- paste("Rain Gauge Station", l, sep = " ")
plot(z[,2],z[,1], xlab = "Satellite Estimate (mm)", ylab = "Rain Gauge Measurement (mm)", cex = 0.4, main = m1)
abline(0,1, lty = 1, col = "red")
abline(lm(z[,1]~z[,2]), col = "blue", lty = 3)
abline(rlm(z[,1]~z[,2], method = "M"), col = "green", lty = 6)
legend("bottomright", legend = c("y=x","Linear Regression", "Robust Regression"), col = c("red","blue","green"), lty = c(1,3,6))
}else{
print("Stations do not match")
}
}
p1(600)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete[[i]]
MS <- Monthly.Satellite.Data.Complete[[i]]
y <- MG$Rainfall[MS$Month!=0]
x <- MS$Precipitation[MS$Month!=0]
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- rq(y ~ x, tau = 0.025)
beta0 <- mod$coefficient[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, Dist2Coast, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete[[i]]
MS <- Monthly.Satellite.Data.Complete[[i]]
y <- MG$Rainfall[MS$Month!=0]
x <- MS$Precipitation[MS$Month!=0]
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- rq(y ~ x, tau = 0.025)
beta0 <- mod$coefficient[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, Dist2Coast, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
help(Xl)
head(Xl)
Xl <- NULL
for(i in 1:3955){
tryCatch({
MG <- Monthly.Rain.Gauge.Data.Complete[[i]]
MS <- Monthly.Satellite.Data.Complete[[i]]
y <- MG$Rainfall[MS$Month!=0]
x <- MS$Precipitation[MS$Month!=0]
if(class(x[1])=="factor"){
x <- levels(x)[x]
x <- as.numeric(x)
}
if(class(y[1])=="factor"){
y <- levels(y)[y]
y <- as.numeric(y)
}
mod <- rq(y ~ x, tau = 0.025)
beta0 <- mod$coefficient[1]
beta1 <- mod$coefficients[2]
Lon <- MS$Longitude[1]
Lat <- MS$Latitude[1]
Station <- MS$Station[1]
s <- summary(mod)$sigma
n <- length(MS$Precipitation)
Dist2Coast <- mean(D2C[D2C[,1] < Lon + 0.02 & D2C[,1] > Lon - 0.02 & D2C[,2] > Lat - 0.02 & D2C[,2] < Lat + 0.02,3])
tot.gauge <- sum(y)
tot.sat <- sum(x, na.rm = TRUE)
Xl <- rbind(Xl, cbind(beta0, beta1, Lat, Lon, Station, s, n, Dist2Coast, tot.gauge, tot.sat))
if(i%%100==0){
print(i)
}
}, error = function(e){})
}
rownames(Xl) <- NULL
Xl <- as.data.frame(Xl)
head(Xl)
hist(Xl[,1])
hist(Xl[,2])
Xl <- as.data.frame(Xl)
Xl <- Xl[which(Xl[,4]!=0),]
Xl <- Xl[complete.cases(Xl),]
Xl <- Xl[Xl[,4]>100,]
hist(Xl[,1])
hist(Xl[,2])
Xl <- Xl[Xl[,2] >-0.2 & Xl[,2] < 0.5, ]
hist(Xl[,1])
Xl <- Xl[Xl[,1]< 10 & Xl[,1] > -10,]
Xl <- Xl[Xl[,7] > 12,]
hist(Xl[,1])
hist(Xl[,2])
plot(newmap, xlim = c(109.4,154.6), ylim = c(-43.65,-10.58), main = "Intercept")
scatter2D(Xl[,4],Xl[,3], colvar = Xl[,1], add = TRUE, cex = 0.2, colkey = list( side = 2)) #Plotting the intercept
plot(newmap, xlim = c(113.4,158.6), ylim = c(-43.65,-10.58), main = "Slope")
scatter2D(Xl[,4],Xl[,3], colvar = Xl[,2], add = TRUE, cex = 0.2) #Plotting the slope
library(sp)
library(raster)
p2 <- getData("GADM", country = "AUS", level = 2)
p2
p2 <- getData("GADM", country = "AUS", level = 1)
plot(p2)
p2
library(maps)
m = map("state", fill = TRUE, plot = FALSE)
m
data(italyMapEnv)
data(iaustraliaMapEnv)
data(australiaMapEnv)
data(ausMapEnv)
map('italy', fill = TRUE, col = 1:10)
map("aus")
map('australia')
map("aus")
data(worldMapEnv)
map("world")
map('aus')
library(tidyverse)  # load dplyr, tidyr, ggplot2 packages
library(sf)
install.packages("tidyverse")
states <- read_sf("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp")
get_map
install.packages("ggmap")
library(ggmap)
qmap(location = "boston university")
qmap(location = "boston university", zoom = 14)
qmap(location = "boston university", zoom = 14, source = "osm")
get_map(location = "tartu", zoom = 13)
help(get_map)
?register_google
ggmap_show_api_key()
get_map(location = "tartu", zoom = 13)
showing_key()
get_map(location = "tartu", zoom = 13)
google_key()
devtools::install_github("dkahle/ggmap")
library(ggmap)
# save api key
register_google(key = "YOUR_API_KEY")
has_goog_key()
has_google_key()
library(ggmap)
ggmap_show_api_key()
install.packages(ggmap)
library(ggmpa)
library(ggmap)
google_key
google_key()
has_google_key()
# save api key
register_google(key = "YOUR_API_KEY")
devtools::install_github("dkahle/ggmap")
register_google(key = "YOUR_API_KEY")
register_google(key = "YOUR_API_KEY")
5+5
has_google_key()
ggmap(
ggmap = get_map(
"Dayton",
zoom = 13, scale = "auto",
maptype = "satellite",
source = "google"),
extent = "device",
legend = "topright"
)
map <- get_map()
map
str(map)
library(RCurl)
years <- c(rep(2000,10),sort(rep(seq(2001,2018),12)))
months <- rep(c("01","02","03","04","05","06","07","08","09","10","11","12"),19)
days <- rep(c("31","28","31","30","31","30","31","31","30","31","30","31"),19)
months <- cbind(months, days)
months <- months[-(1:2),]
dates <- cbind(years, months)
for(i in 1:(dim(dates)[1])){
if(dates[i,2] == "02"){
if(dates[i,1] == "2004" | dates[i,1] == "2008" | dates[i,1] == "2012" | dates[i,1] == "2016"){
dates[i,3] <- "29"
}
}
}
setwd("/Users/bhines/Documents/Rain Data/Monthly.Jaxa All locations")
base.URL1 <- "https://sharaku.eorc.jaxa.jp/cgi-bin/trmm/GSMaP/tilemap/show_graph.cgi?flag=1&st="
base.url <- "https://sharaku.eorc.jaxa.jp/cgi-bin/trmm/GSMaP/tilemap/show_graph.cgi?flag=1&st="
Monthly.grid <- list()
for(j in (dim(dates)[1]-6):(dim(dates)[1]-3)){
print(j)
Temp.Matrix <- matrix(0, dim(Stations.1)[1], 5)
base.url2 <- paste(base.URL1, dates[j-1,1], dates[j-1,2], dates[j-1,3],"23", "&ed=", dates[j,1], dates[j,2], dates[j,3],
"23","&lat0=", sep = "")
for(i in 1:(dim(Stations.1)[1])){
latitude <- Stations.1[i,7]
longitude <- Stations.1[i,8]
base.url3 <- paste(base.url2, latitude, "&lon0=", longitude, "&lang=en", sep = "")
x <- readLines(base.url3)
m <- 0
l <- length(x)
while(m == 0){
if(regexpr("y:",x[l])[1]!=-1){
x <- x[l]
y.2 <- regexpr(" }", x)
accum <- substr(x, regexpr("y:",x)[1] + 2, y.2 - 1)
m <- 1
}else{
l <- l - 1
}
}
Temp.Vector <- c(dates[j,1], dates[j,2], accum, latitude, longitude)
Temp.Matrix[i,] <- Temp.Vector
if(i %% 10 == 0){
print(i)
}
}
colnames(Temp.Matrix) <- c("Year", "Month", "Rain", "Lat", "Lon")
Monthly.grid[[j]] <- Temp.Matrix
write.csv(Monthly.grid[[j]], file = paste("Monthly", dates[j,1], "-", dates[j,2], sep = ""), row.names = FALSE)
}
